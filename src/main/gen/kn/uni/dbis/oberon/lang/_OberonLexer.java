/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package kn.uni.dbis.oberon.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static kn.uni.dbis.oberon.lang.psi.OberonTypes.*;

@SuppressWarnings("all")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_OberonLexer.flex</tt>
 */
public class _OberonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\14\1\23\3\14\1\23\71\14\1\24\1\14\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\14\1\35\11\14\1\36\21\14\1\37\1\40\24"+
    "\14\1\41\3\14\1\23\1\42\1\41\4\14\1\43\1\44\4\0\1\45\1\46\1\26\3\14\2\47\1"+
    "\26\1\50\1\51\1\0\1\52\5\14\1\53\3\0\1\54\1\55\13\14\1\56\1\45\1\57\1\60\1"+
    "\0\1\61\1\26\1\62\1\63\3\14\3\0\1\64\12\14\1\65\1\0\1\66\1\26\1\0\1\67\3\14"+
    "\1\53\1\70\1\22\2\14\1\65\1\71\1\72\1\73\2\26\3\14\1\74\1\14\1\47\6\26\2\14"+
    "\1\31\1\75\2\26\1\76\5\0\1\77\6\14\1\100\2\0\1\101\1\14\1\102\1\0\1\41\1\14"+
    "\1\103\1\104\1\105\2\14\1\106\1\107\1\110\1\111\1\112\1\62\1\113\1\102\1\0"+
    "\1\114\1\115\1\116\1\117\1\105\2\14\1\106\1\120\1\121\1\122\1\123\1\124\1"+
    "\125\1\126\1\0\1\127\1\26\1\116\1\36\1\35\2\14\1\106\1\130\1\110\1\45\1\131"+
    "\1\132\1\26\1\102\1\0\1\42\1\133\1\116\1\104\1\105\2\14\1\106\1\130\1\110"+
    "\1\111\1\123\1\126\1\113\1\102\1\0\1\42\1\26\1\134\1\135\1\136\1\137\1\115"+
    "\1\135\1\14\1\140\1\141\1\142\1\143\1\26\1\126\1\0\1\26\1\42\1\144\1\31\1"+
    "\106\2\14\1\106\1\14\1\145\1\146\1\142\1\147\1\47\1\102\1\0\2\26\1\103\1\31"+
    "\1\106\2\14\1\106\1\150\1\110\1\146\1\142\1\147\1\33\1\102\1\0\1\151\1\26"+
    "\1\144\1\31\1\106\4\14\1\152\1\146\1\153\1\154\1\43\1\102\1\0\1\26\1\40\1"+
    "\155\1\14\1\23\1\40\2\14\1\35\1\156\1\23\1\157\1\160\1\0\1\126\1\0\1\161\1"+
    "\26\1\41\5\14\1\162\1\163\1\164\1\165\1\0\1\166\4\26\1\167\1\170\1\171\1\41"+
    "\1\172\1\173\1\162\1\174\1\175\1\50\1\0\1\176\4\26\1\132\2\26\1\166\1\0\1"+
    "\166\1\177\1\200\1\14\1\41\3\14\1\27\1\44\1\0\1\146\1\201\1\0\1\44\3\0\1\202"+
    "\1\203\7\26\5\14\1\53\1\0\1\204\1\0\1\166\1\65\1\205\1\206\1\207\1\210\1\14"+
    "\1\211\1\212\1\0\1\50\4\14\1\36\1\21\5\14\1\213\51\14\1\136\1\23\1\136\5\14"+
    "\1\136\4\14\1\136\1\23\1\136\1\14\1\23\7\14\1\136\10\14\1\214\4\26\2\14\2"+
    "\26\12\14\2\75\1\41\114\14\1\104\2\14\1\41\2\14\1\47\11\14\1\135\1\14\1\132"+
    "\1\14\1\31\1\215\1\26\2\14\1\215\1\26\2\14\1\216\1\26\1\14\1\31\1\217\1\26"+
    "\6\14\1\220\3\0\1\221\1\222\1\0\1\166\3\26\1\223\1\0\1\166\13\14\1\26\1\224"+
    "\4\14\1\225\10\14\1\75\1\26\3\14\1\23\1\0\1\2\1\0\1\2\1\126\1\0\3\14\1\75"+
    "\1\27\1\26\5\14\1\114\3\14\1\25\1\0\1\166\4\26\2\14\1\164\1\2\6\14\1\201\1"+
    "\165\3\0\1\111\1\0\1\166\1\0\1\166\1\43\1\26\1\0\1\50\10\26\1\226\5\14\1\220"+
    "\1\0\1\226\1\114\1\0\1\166\1\26\1\227\1\2\1\26\1\230\3\14\1\101\1\207\1\0"+
    "\1\67\4\14\1\65\1\0\1\2\1\26\4\14\1\220\2\0\1\26\1\0\1\231\1\0\1\67\3\14\1"+
    "\75\1\14\1\132\10\26\1\232\2\0\1\233\1\234\1\166\30\14\7\0\1\235\42\14\2\75"+
    "\4\14\2\75\1\14\1\236\3\14\1\75\6\14\1\31\1\175\1\237\1\27\1\240\1\114\1\14"+
    "\1\27\1\237\1\27\1\26\1\227\3\26\1\241\1\26\1\43\1\132\1\26\1\242\1\26\1\146"+
    "\1\0\1\42\1\43\2\26\1\14\1\27\4\14\2\26\1\0\1\202\1\243\1\0\1\244\1\26\1\245"+
    "\1\40\1\156\1\246\1\30\1\247\1\14\1\250\1\251\1\252\2\26\5\14\1\132\116\26"+
    "\5\14\1\23\5\14\1\23\20\14\1\27\1\253\1\254\1\26\4\14\1\36\1\21\7\14\1\43"+
    "\1\26\1\62\2\14\1\23\1\26\10\23\4\0\5\26\1\43\72\26\1\251\3\26\1\41\1\211"+
    "\1\246\1\27\1\41\11\14\1\23\1\255\1\41\12\14\1\213\1\251\4\14\1\23\1\41\12"+
    "\14\1\23\2\26\3\14\1\47\6\26\170\14\1\75\11\26\75\14\1\47\2\26\21\14\1\27"+
    "\10\26\5\14\1\75\41\14\1\27\2\14\1\0\1\254\2\26\5\14\1\164\1\76\1\256\3\14"+
    "\1\65\12\14\1\166\3\26\1\43\1\14\1\40\14\14\1\105\3\14\1\23\1\14\7\26\1\43"+
    "\1\14\1\257\1\260\2\14\1\53\2\26\1\132\6\14\1\114\1\26\1\67\5\14\1\220\1\0"+
    "\1\50\1\26\1\0\1\166\2\0\1\67\1\261\1\0\1\67\2\14\1\65\1\50\2\14\1\164\1\0"+
    "\1\2\1\26\3\14\1\27\1\77\5\14\1\53\1\0\1\244\1\43\1\0\1\166\1\262\1\14\1\0"+
    "\1\263\5\14\1\101\1\165\1\26\1\260\1\264\1\0\1\166\2\14\1\23\1\265\6\14\1"+
    "\206\1\266\1\225\2\26\1\267\1\14\1\53\1\270\1\26\3\271\1\26\2\23\5\14\1\213"+
    "\1\75\1\26\16\14\1\53\1\272\1\0\1\166\64\14\1\114\1\26\2\14\1\23\1\273\5\14"+
    "\1\114\40\26\55\14\1\75\15\14\1\25\4\26\1\23\1\26\1\273\1\274\1\14\1\106\1"+
    "\23\1\175\1\275\15\14\1\25\3\26\1\273\54\14\1\75\2\26\10\14\1\40\6\14\5\26"+
    "\1\14\1\27\2\0\2\26\2\0\1\115\2\26\1\251\3\26\1\42\1\31\20\14\1\276\1\242"+
    "\1\26\1\0\1\166\1\41\2\14\1\117\1\41\2\14\1\47\1\277\12\14\1\23\3\40\1\300"+
    "\1\301\2\26\1\302\1\14\1\150\2\14\1\23\2\14\1\303\1\14\1\75\1\14\1\75\4\26"+
    "\17\14\1\47\10\26\6\14\1\27\20\26\1\304\20\26\3\14\1\27\6\14\1\132\1\26\1"+
    "\244\3\26\4\14\1\26\1\251\3\14\1\47\4\14\1\65\1\305\3\14\1\75\4\14\1\114\1"+
    "\14\1\246\5\26\23\14\1\75\1\0\1\166\4\14\1\114\4\14\1\114\5\14\1\26\6\14\1"+
    "\114\23\26\46\14\1\23\1\26\2\14\1\75\1\26\1\14\23\26\1\75\1\106\4\14\1\36"+
    "\1\306\2\14\1\75\1\26\2\14\1\23\1\26\3\14\1\23\10\26\2\14\1\307\1\26\2\14"+
    "\1\75\1\26\3\14\1\25\10\26\7\14\1\277\10\26\1\310\1\76\1\150\1\41\2\14\1\114"+
    "\1\122\4\26\3\14\1\27\3\14\1\27\4\26\1\14\1\41\2\14\1\311\3\26\6\14\1\75\1"+
    "\26\2\14\1\75\1\26\2\14\1\47\1\26\2\14\1\25\15\26\11\14\1\132\6\26\6\14\1"+
    "\47\1\26\6\14\1\47\41\26\1\230\6\14\1\0\1\165\3\26\1\126\1\0\1\26\1\62\1\230"+
    "\5\14\1\0\1\312\2\26\3\14\1\132\1\0\1\166\1\230\3\14\1\164\1\0\1\146\1\0\2"+
    "\26\4\14\1\313\1\26\1\230\5\14\1\53\1\0\1\314\1\315\1\0\1\316\4\26\2\14\1"+
    "\35\2\14\1\220\1\0\1\203\10\26\1\23\1\247\1\14\1\36\1\14\1\132\5\14\1\164"+
    "\1\0\1\305\1\0\1\166\1\144\1\104\1\105\2\14\1\106\1\130\1\110\1\111\1\123"+
    "\1\143\1\251\1\102\2\202\21\26\6\14\1\201\1\0\1\204\1\47\1\0\1\166\4\26\6"+
    "\14\2\0\1\317\1\26\1\0\1\166\24\26\5\14\1\164\1\50\1\0\1\244\2\26\1\264\4"+
    "\26\6\14\2\0\1\320\1\26\1\0\1\166\4\26\5\14\1\53\1\0\1\26\1\0\1\166\6\26\3"+
    "\14\1\321\1\0\1\2\1\0\1\166\54\26\10\14\1\0\1\166\1\26\1\43\40\26\1\101\1"+
    "\230\4\14\1\53\1\322\1\62\1\26\1\101\1\77\4\14\1\240\1\211\1\0\1\166\4\26"+
    "\7\14\1\132\40\26\1\14\1\106\3\14\1\164\1\165\1\0\1\132\1\26\1\0\1\166\2\26"+
    "\1\40\3\14\1\323\2\0\1\44\1\165\11\26\1\23\1\35\4\14\1\324\1\325\1\212\1\26"+
    "\1\0\1\166\24\26\63\14\1\25\14\26\15\14\1\23\2\26\30\14\1\114\27\26\5\14\1"+
    "\23\72\26\10\14\1\23\67\26\7\14\1\132\3\14\1\23\1\0\1\166\14\26\3\14\1\75"+
    "\1\202\1\26\6\14\1\165\1\26\1\114\1\26\1\0\1\166\1\273\2\14\1\251\2\14\56"+
    "\26\10\14\1\27\1\26\1\101\4\0\1\165\1\26\1\62\1\230\1\14\10\26\1\25\3\26\75"+
    "\14\1\27\2\26\36\14\1\47\41\26\43\14\1\23\12\26\61\14\1\114\40\26\15\14\1"+
    "\47\1\14\1\27\1\14\1\132\1\14\1\326\1\2\127\26\1\327\1\330\2\0\1\331\1\2\3"+
    "\26\1\332\22\26\1\315\67\26\12\14\1\31\10\14\1\31\1\333\1\334\1\14\1\335\1"+
    "\150\7\14\1\36\1\336\2\31\3\14\1\337\1\175\1\40\1\106\51\14\1\75\3\14\1\106"+
    "\2\14\1\213\3\14\1\213\2\14\1\31\3\14\1\31\2\14\1\23\3\14\1\23\3\14\1\106"+
    "\3\14\1\106\2\14\1\213\1\340\14\0\1\165\1\227\5\0\1\202\1\304\1\26\1\341\2"+
    "\26\1\227\1\44\1\0\52\26\1\165\2\0\1\342\1\343\1\305\72\26\30\14\1\27\1\26"+
    "\1\165\5\26\10\14\1\220\1\305\1\0\1\166\24\26\1\150\3\14\1\167\1\41\1\213"+
    "\1\344\1\245\1\345\1\167\1\236\1\167\2\213\1\125\1\14\1\35\1\14\1\114\1\346"+
    "\1\35\1\14\1\114\50\26\32\14\1\23\5\26\106\14\1\27\1\26\33\14\1\75\120\14"+
    "\1\25\1\26\146\14\1\132\3\26\3\14\1\75\74\26\1\124\3\26\14\0\20\26\36\0\2"+
    "\26");

  /* The ZZ_CMAP_A table has 1848 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\1\1\16\1\15\2\1\6\6\4\0\1\1\1\0\1\13\1\66\1\5\1\0\1\60\1\0\1\2\1\4"+
    "\1\3\1\22\1\25\1\23\1\17\1\63\1\7\11\12\1\24\1\33\1\65\1\61\1\64\2\0\1\34"+
    "\1\41\1\46\1\36\1\21\1\51\1\42\1\10\1\43\2\11\1\45\1\54\1\35\1\44\1\55\1\11"+
    "\1\37\1\47\1\50\1\53\1\57\1\56\1\52\1\40\1\11\1\27\1\14\1\32\1\62\1\5\1\0"+
    "\4\5\1\20\15\5\1\26\1\30\1\31\1\67\6\6\1\70\2\6\2\0\4\5\4\0\1\5\2\0\1\6\7"+
    "\0\1\5\4\0\1\5\5\0\7\5\1\0\2\5\4\0\4\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1"+
    "\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\13\5\1\0\3\5\1"+
    "\0\5\6\2\0\6\5\1\0\7\5\1\0\1\5\15\0\1\5\1\0\15\6\1\0\1\6\1\0\2\6\1\0\2\6\1"+
    "\0\1\6\3\5\5\0\6\6\5\0\1\5\4\0\3\6\1\0\1\6\3\0\3\5\7\6\4\0\2\5\1\6\13\5\1"+
    "\0\1\5\7\6\2\5\2\6\1\0\4\6\2\5\2\6\3\5\2\0\1\5\7\0\1\6\1\5\1\6\6\5\3\6\2\0"+
    "\11\5\3\6\1\5\6\0\2\6\6\5\4\6\2\5\2\0\2\6\1\5\11\6\1\5\3\6\1\5\5\6\2\0\1\5"+
    "\3\6\4\0\6\5\6\0\10\6\6\5\3\6\1\5\2\6\1\5\7\6\2\5\2\6\2\0\2\6\1\5\3\6\1\0"+
    "\10\5\2\0\2\5\2\0\6\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0"+
    "\3\6\1\5\5\0\2\5\1\0\5\5\7\0\2\5\4\0\3\6\1\0\6\5\4\0\2\5\1\0\2\5\1\0\2\5\1"+
    "\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\4\6\3\5"+
    "\1\6\2\0\1\5\1\0\2\5\1\0\3\5\2\6\1\0\3\6\2\0\1\5\10\0\1\5\6\6\2\0\1\6\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\4\5\4\0\5\6\3\0\3\6\1\0\4\6\2"+
    "\0\1\5\6\0\5\6\1\0\5\5\3\0\1\5\7\6\1\0\2\6\5\0\2\6\1\0\4\5\1\0\3\5\1\0\2\5"+
    "\5\0\3\5\2\6\1\5\3\6\1\0\4\6\1\5\5\0\3\5\1\6\2\0\2\6\1\0\7\5\1\0\1\5\4\0\1"+
    "\6\4\0\6\6\1\0\1\6\3\0\2\6\4\0\1\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\2\6\7\0\2"+
    "\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5"+
    "\1\0\3\5\2\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\2\6\2\0\4\5\5\0\1\6\1\0\1\6\1"+
    "\0\1\6\4\0\2\6\5\5\10\6\11\0\1\6\1\0\7\6\1\5\2\6\4\5\3\6\1\5\3\6\2\5\7\6\3"+
    "\5\4\6\5\5\14\6\1\5\1\6\3\5\1\0\7\5\2\0\3\6\2\5\3\6\3\0\2\5\2\6\4\0\1\5\1"+
    "\0\2\6\4\0\4\5\10\6\3\0\1\5\3\0\2\5\1\6\5\0\4\6\1\0\5\5\2\6\2\5\1\6\1\5\5"+
    "\0\5\6\3\5\3\0\10\6\5\5\2\6\3\0\3\5\3\6\1\0\5\6\4\5\1\6\4\5\3\6\2\5\3\6\1"+
    "\0\5\6\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0\3\5\1\0\6\5\2\0\2\5\2\71\5\6\5"+
    "\0\1\5\4\0\1\6\3\0\4\6\11\0\1\5\4\0\1\5\1\0\5\5\2\0\1\5\1\0\4\5\1\0\3\5\2"+
    "\0\4\5\5\0\5\5\4\0\1\5\4\0\4\5\3\6\2\5\5\0\2\6\2\0\3\5\6\6\1\0\3\5\1\6\3\5"+
    "\1\6\4\5\1\6\4\5\3\0\1\5\1\0\1\5\2\0\5\5\1\6\2\5\2\6\5\5\1\0\4\5\2\6\4\0\1"+
    "\5\3\6\2\5\1\6\5\5\2\6\3\0\3\5\4\0\3\5\2\6\2\0\6\5\1\0\3\6\1\0\2\6\5\0\5\5"+
    "\5\0\1\5\1\6\3\5\1\0\2\5\1\0\7\5\2\0\1\6\6\0\2\5\2\0\3\5\3\0\2\5\3\0\2\5\2"+
    "\0\3\6\4\0\3\5\1\0\2\5\1\0\1\5\5\0\1\6\2\0\3\6\5\0\1\5\3\0\1\5\2\0\4\5\1\0"+
    "\2\5\2\0\1\5\3\6\1\0\2\6\1\0\5\5\2\6\1\0\3\6\2\0\1\6\2\0\3\5\1\6\2\0\1\5\1"+
    "\0\1\6\4\5\5\0\3\6\3\0\2\6\1\5\1\0\1\5\3\0\4\6\2\5\1\0\1\5\1\6\3\0\1\5\3\0"+
    "\2\5\3\0\5\6\1\5\4\6\3\0\6\6\1\5\6\6\3\0\1\6\1\0\2\6\1\0\1\6\2\5\3\0\2\6\6"+
    "\0\5\6\3\0\6\6\2\0\3\6\2\0\4\6\4\0\1\5\2\0\2\5\2\0\4\5\1\0\4\5\1\0\1\5\1\0"+
    "\6\5\2\0\5\5\1\0\4\5\1\0\4\5\2\0\2\6\4\0\1\6\3\0\1\6\2\0\7\6\1\0\2\6\1\0\2"+
    "\6\1\0\1\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\3\7"+
    "\1\1\1\10\1\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\21\7\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\7\2\0\2\7\1\0\1\34\1\0\1\35\3\7"+
    "\1\36\5\7\1\37\2\7\1\40\1\7\1\41\1\42"+
    "\1\43\1\7\1\44\1\45\7\7\1\46\12\7\1\47"+
    "\1\50\1\33\2\51\2\0\1\34\1\0\1\52\1\53"+
    "\3\7\1\54\1\7\1\55\1\56\1\57\21\7\1\60"+
    "\2\7\1\61\4\7\1\62\1\33\1\63\1\7\1\64"+
    "\2\7\1\65\10\7\1\66\1\67\2\7\1\70\1\71"+
    "\1\72\7\7\1\73\1\74\1\7\1\75\3\7\1\76"+
    "\5\7\1\77\1\7\1\100\1\7\1\101\3\7\1\102"+
    "\1\103\1\104\1\105\1\106\2\7\1\107\2\7\1\110"+
    "\1\7\1\111\2\7\1\112\1\113\1\7\1\114\2\7"+
    "\1\115\1\116\1\117\1\7\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\72\0\350\0\u0122"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\72\0\72\0\u027e"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\72\0\72\0\72\0\72\0\u0692\0\u06cc\0\72\0\72"+
    "\0\u0706\0\u0740\0\72\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u01d0"+
    "\0\72\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\72\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u015c\0\u0aa6\0\u0ae0\0\u015c"+
    "\0\u0b1a\0\u0b54\0\u015c\0\u015c\0\u0b8e\0\u015c\0\u015c\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u015c\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\72\0\72\0\u0fa2\0\u0fdc\0\u1016\0\u1016\0\u1050"+
    "\0\u01d0\0\u108a\0\72\0\u015c\0\u10c4\0\u10fe\0\u1138\0\u015c"+
    "\0\u1172\0\u015c\0\u015c\0\u015c\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u015c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u015c\0\72\0\u015c"+
    "\0\u171c\0\u015c\0\u1756\0\u1790\0\u015c\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u015c\0\u015c\0\u199a"+
    "\0\u19d4\0\u015c\0\u015c\0\u015c\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u015c\0\u015c\0\u1ba4\0\u015c\0\u1bde"+
    "\0\u1c18\0\u1c52\0\u015c\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u015c\0\u1dae\0\u015c\0\u1de8\0\u015c\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u015c\0\u015c\0\u015c\0\u015c\0\u015c\0\u1ed0\0\u1f0a\0\u015c"+
    "\0\u1f44\0\u1f7e\0\u015c\0\u1fb8\0\u015c\0\u1ff2\0\u202c\0\u015c"+
    "\0\u015c\0\u2066\0\u015c\0\u20a0\0\u20da\0\u015c\0\u015c\0\u015c"+
    "\0\u2114\0\u015c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\2\11\1\12\1\13\1\2\1\0\1\3\1\14\1\7"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\11"+
    "\1\34\1\11\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\11\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\75\0"+
    "\1\3\14\0\1\3\56\0\1\61\73\0\6\7\5\0"+
    "\2\7\12\0\24\7\10\0\1\7\10\0\1\62\1\63"+
    "\1\0\1\62\4\0\1\64\2\65\55\0\2\7\4\11"+
    "\5\0\1\7\1\11\12\0\24\11\10\0\1\7\10\0"+
    "\1\12\2\66\1\12\4\0\1\64\1\65\1\67\12\0"+
    "\24\66\12\0\13\70\1\71\1\72\1\70\1\0\53\70"+
    "\17\0\1\73\57\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\1\11\1\74\7\11\1\75\4\11\1\76\5\11"+
    "\10\0\1\7\62\0\1\77\15\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\1\11\1\100\1\11\1\101\20\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\102"+
    "\12\0\7\11\1\103\14\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\7\11\1\104\1\105"+
    "\13\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\106\12\0\24\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\107\12\0\4\11\1\110\3\11\1\111"+
    "\13\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\11\12\0\1\11\1\112\11\11\1\113\1\11\1\114"+
    "\2\11\1\115\3\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\11\12\0\3\11\1\116\11\11\1\117"+
    "\6\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\11\12\0\10\11\1\120\13\11\10\0\1\7\6\0"+
    "\2\7\4\11\5\0\1\7\1\11\12\0\1\121\7\11"+
    "\1\122\13\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\14\11\1\123\7\11\10\0\1\7"+
    "\6\0\2\7\1\11\1\124\2\11\5\0\1\7\1\11"+
    "\12\0\3\11\1\125\1\126\3\11\1\127\13\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\11\12\0"+
    "\1\130\7\11\1\131\6\11\1\132\4\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\1\11"+
    "\1\133\22\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\10\11\1\134\13\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\3\11"+
    "\1\135\4\11\1\136\13\11\10\0\1\7\6\0\2\7"+
    "\1\11\1\137\2\11\5\0\1\7\1\11\12\0\7\11"+
    "\1\140\14\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\1\141\23\11\10\0\1\7\62\0"+
    "\1\142\71\0\1\143\10\0\3\61\1\144\66\61\7\0"+
    "\1\62\2\0\1\62\4\0\1\64\2\65\57\0\1\145"+
    "\2\0\1\145\66\0\1\146\2\0\1\146\7\0\2\147"+
    "\55\0\4\66\6\0\1\66\12\0\24\66\21\0\4\66"+
    "\6\0\1\66\2\147\10\0\24\66\12\0\1\70\1\150"+
    "\11\70\1\151\1\72\1\150\1\152\53\70\17\0\1\153"+
    "\57\0\2\7\4\11\5\0\1\7\1\11\12\0\2\11"+
    "\1\154\21\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\13\11\1\155\10\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\7\11"+
    "\1\156\4\11\1\157\7\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\2\11\1\160\21\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\3\11\1\161\20\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\22\11\1\162\1\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\11\11\1\163\12\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\23\11\1\164\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\11\12\0"+
    "\1\165\11\11\1\166\1\11\1\167\4\11\1\170\2\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\6\11\1\171\15\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\10\11\1\172\13\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\14\11\1\173\7\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\21\11\1\174\2\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\1\11\1\175\6\11\1\176\13\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\13\11"+
    "\1\177\10\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\1\11\1\200\22\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\3\11"+
    "\1\201\20\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\202\12\0\24\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\17\11\1\203\4\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\21\11\1\204\2\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\11\11\1\205\12\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\3\11\1\206\20\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\1\11\1\207\22\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\14\11\1\210\7\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\2\11\1\211\21\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\10\11\1\212\13\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\7\11\1\213\14\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\7\11\1\214\14\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\14\11\1\215\7\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\3\11\1\216\20\11\10\0\1\7\1\0\3\61"+
    "\1\144\1\217\65\61\7\0\1\145\2\0\1\145\5\0"+
    "\2\65\57\0\1\146\2\0\1\146\57\0\1\70\1\150"+
    "\11\70\1\71\1\72\1\150\1\152\53\70\1\0\1\152"+
    "\12\0\1\70\2\152\60\0\2\7\4\11\5\0\1\7"+
    "\1\220\12\0\7\11\1\221\14\11\10\0\1\7\6\0"+
    "\2\7\4\11\5\0\1\7\1\11\12\0\14\11\1\222"+
    "\7\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\223\12\0\24\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\11\12\0\1\224\23\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\11\11"+
    "\1\225\12\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\10\11\1\226\13\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\17\11"+
    "\1\227\4\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\230\12\0\24\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\7\11\1\231\14\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\11\11\1\232\12\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\233\12\0\24\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\10\11"+
    "\1\234\13\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\6\11\1\235\15\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\21\11"+
    "\1\236\2\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\237\12\0\24\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\13\11\1\240\10\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\7\11\1\241\14\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\1\11\1\242\22\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\243"+
    "\12\0\24\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\244\12\0\24\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\13\11\1\245\10\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\12\11\1\246\11\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\7\11\1\247\14\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\17\11\1\250\4\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\12\11\1\251\11\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\1\11\1\252\22\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\11\11\1\253\12\11"+
    "\10\0\1\7\6\0\2\7\1\11\1\254\2\11\5\0"+
    "\1\7\1\11\12\0\24\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\15\11\1\255\6\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\3\11\1\256\20\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\4\11\1\257\17\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\3\11\1\260\20\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\3\11\1\261\20\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\1\262\23\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\11\12\0\1\11\1\263\22\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\264\12\0"+
    "\24\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\11\12\0\6\11\1\265\15\11\10\0\1\7\6\0"+
    "\2\7\4\11\5\0\1\7\1\11\12\0\3\11\1\266"+
    "\20\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\11\12\0\3\11\1\267\3\11\1\270\14\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\11\12\0"+
    "\14\11\1\271\7\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\11\12\0\1\11\1\272\22\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\273\12\0"+
    "\24\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\11\12\0\14\11\1\274\7\11\10\0\1\7\6\0"+
    "\2\7\4\11\5\0\1\7\1\11\12\0\11\11\1\275"+
    "\12\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\11\12\0\11\11\1\276\12\11\10\0\1\7\6\0"+
    "\2\7\4\11\5\0\1\7\1\277\12\0\24\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\11\12\0"+
    "\14\11\1\300\7\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\301\12\0\24\11\10\0\1\7\6\0"+
    "\2\7\4\11\5\0\1\7\1\11\12\0\1\11\1\302"+
    "\22\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\11\12\0\2\11\1\303\21\11\10\0\1\7\6\0"+
    "\2\7\4\11\5\0\1\7\1\11\12\0\1\11\1\304"+
    "\22\11\10\0\1\7\6\0\2\7\4\11\5\0\1\7"+
    "\1\11\12\0\14\11\1\305\7\11\10\0\1\7\6\0"+
    "\2\7\4\11\5\0\1\7\1\11\12\0\1\306\23\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\307"+
    "\12\0\24\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\11\12\0\14\11\1\310\7\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\311\12\0\24\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\1\11\1\312\22\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\6\11\1\313\15\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\7\11\1\314\14\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\315\12\0\24\11\10\0\1\7"+
    "\6\0\2\7\4\11\5\0\1\7\1\11\12\0\2\11"+
    "\1\316\21\11\10\0\1\7\6\0\2\7\4\11\5\0"+
    "\1\7\1\317\12\0\24\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\1\11\1\320\22\11"+
    "\10\0\1\7\6\0\2\7\4\11\5\0\1\7\1\11"+
    "\12\0\3\11\1\321\20\11\10\0\1\7\6\0\2\7"+
    "\4\11\5\0\1\7\1\11\12\0\1\322\23\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\11\12\0"+
    "\14\11\1\323\7\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\11\12\0\10\11\1\324\13\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\11\12\0"+
    "\17\11\1\325\4\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\11\12\0\3\11\1\326\20\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\11\12\0"+
    "\11\11\1\327\12\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\11\12\0\1\11\1\330\22\11\10\0"+
    "\1\7\6\0\2\7\4\11\5\0\1\7\1\11\12\0"+
    "\3\11\1\331\20\11\10\0\1\7\6\0\2\7\4\11"+
    "\5\0\1\7\1\332\12\0\24\11\10\0\1\7\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8526];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\7\1\2\11\1\1\7\11"+
    "\21\1\4\11\2\1\2\11\1\1\1\0\1\11\2\0"+
    "\2\1\1\0\1\11\1\0\4\1\1\11\42\1\2\11"+
    "\3\1\2\0\1\1\1\0\1\11\43\1\1\11\113\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _OberonLexer() {
    this((java.io.Reader)null);
  }
  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _OberonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 81: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 82: break;
          case 3: 
            { return LPAREN;
            } 
            // fall through
          case 83: break;
          case 4: 
            { return OP_TIMES;
            } 
            // fall through
          case 84: break;
          case 5: 
            { return RPAREN;
            } 
            // fall through
          case 85: break;
          case 6: 
            { return IDENTIFIER;
            } 
            // fall through
          case 86: break;
          case 7: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 87: break;
          case 8: 
            { return PERIOD;
            } 
            // fall through
          case 88: break;
          case 9: 
            { return OP_PLUS;
            } 
            // fall through
          case 89: break;
          case 10: 
            { return OP_MINUS;
            } 
            // fall through
          case 90: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 91: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 92: break;
          case 13: 
            { return LBRACE;
            } 
            // fall through
          case 93: break;
          case 14: 
            { return LBRACK;
            } 
            // fall through
          case 94: break;
          case 15: 
            { return PIPE;
            } 
            // fall through
          case 95: break;
          case 16: 
            { return RBRACE;
            } 
            // fall through
          case 96: break;
          case 17: 
            { return RBRACK;
            } 
            // fall through
          case 97: break;
          case 18: 
            { return SEMICOLON;
            } 
            // fall through
          case 98: break;
          case 19: 
            { return OP_AND;
            } 
            // fall through
          case 99: break;
          case 20: 
            { return OP_EQ;
            } 
            // fall through
          case 100: break;
          case 21: 
            { return OP_DEREF;
            } 
            // fall through
          case 101: break;
          case 22: 
            { return OP_DIVIDE;
            } 
            // fall through
          case 102: break;
          case 23: 
            { return OP_GT;
            } 
            // fall through
          case 103: break;
          case 24: 
            { return OP_LT;
            } 
            // fall through
          case 104: break;
          case 25: 
            { return OP_NEQ;
            } 
            // fall through
          case 105: break;
          case 26: 
            { return OP_NOT;
            } 
            // fall through
          case 106: break;
          case 27: 
            { return COMMENT;
            } 
            // fall through
          case 107: break;
          case 28: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 108: break;
          case 29: 
            { return RANGE;
            } 
            // fall through
          case 109: break;
          case 30: 
            { return OP_BECOMES;
            } 
            // fall through
          case 110: break;
          case 31: 
            { return KW_DO;
            } 
            // fall through
          case 111: break;
          case 32: 
            { return KW_BY;
            } 
            // fall through
          case 112: break;
          case 33: 
            { return OP_IN;
            } 
            // fall through
          case 113: break;
          case 34: 
            { return OP_IS;
            } 
            // fall through
          case 114: break;
          case 35: 
            { return KW_IF;
            } 
            // fall through
          case 115: break;
          case 36: 
            { return OP_OR;
            } 
            // fall through
          case 116: break;
          case 37: 
            { return KW_OF;
            } 
            // fall through
          case 117: break;
          case 38: 
            { return KW_TO;
            } 
            // fall through
          case 118: break;
          case 39: 
            { return OP_GEQ;
            } 
            // fall through
          case 119: break;
          case 40: 
            { return OP_LEQ;
            } 
            // fall through
          case 120: break;
          case 41: 
            { return REAL_LITERAL;
            } 
            // fall through
          case 121: break;
          case 42: 
            { return VARARGS;
            } 
            // fall through
          case 122: break;
          case 43: 
            { return KW_END;
            } 
            // fall through
          case 123: break;
          case 44: 
            { return KW_AND;
            } 
            // fall through
          case 124: break;
          case 45: 
            { return KW_NEW;
            } 
            // fall through
          case 125: break;
          case 46: 
            { return KW_NIL;
            } 
            // fall through
          case 126: break;
          case 47: 
            { return OP_DIV;
            } 
            // fall through
          case 127: break;
          case 48: 
            { return KW_FOR;
            } 
            // fall through
          case 128: break;
          case 49: 
            { return OP_MOD;
            } 
            // fall through
          case 129: break;
          case 50: 
            { return KW_VAR;
            } 
            // fall through
          case 130: break;
          case 51: 
            { return KW_ELSE;
            } 
            // fall through
          case 131: break;
          case 52: 
            { return KW_EXIT;
            } 
            // fall through
          case 132: break;
          case 53: 
            { return KW_REAL;
            } 
            // fall through
          case 133: break;
          case 54: 
            { return KW_LOOP;
            } 
            // fall through
          case 134: break;
          case 55: 
            { return KW_CASE;
            } 
            // fall through
          case 135: break;
          case 56: 
            { return KW_THEN;
            } 
            // fall through
          case 136: break;
          case 57: 
            { return KW_TRUE;
            } 
            // fall through
          case 137: break;
          case 58: 
            { return KW_TYPE;
            } 
            // fall through
          case 138: break;
          case 59: 
            { return KW_WITH;
            } 
            // fall through
          case 139: break;
          case 60: 
            { return KW_ELSIF;
            } 
            // fall through
          case 140: break;
          case 61: 
            { return KW_ARRAY;
            } 
            // fall through
          case 141: break;
          case 62: 
            { return KW_BEGIN;
            } 
            // fall through
          case 142: break;
          case 63: 
            { return KW_CONST;
            } 
            // fall through
          case 143: break;
          case 64: 
            { return KW_FALSE;
            } 
            // fall through
          case 144: break;
          case 65: 
            { return KW_UNTIL;
            } 
            // fall through
          case 145: break;
          case 66: 
            { return KW_WHILE;
            } 
            // fall through
          case 146: break;
          case 67: 
            { return KW_EXTERN;
            } 
            // fall through
          case 147: break;
          case 68: 
            { return KW_RECORD;
            } 
            // fall through
          case 148: break;
          case 69: 
            { return KW_RETURN;
            } 
            // fall through
          case 149: break;
          case 70: 
            { return KW_REPEAT;
            } 
            // fall through
          case 150: break;
          case 71: 
            { return KW_IMPORT;
            } 
            // fall through
          case 151: break;
          case 72: 
            { return KW_STRING;
            } 
            // fall through
          case 152: break;
          case 73: 
            { return KW_MODULE;
            } 
            // fall through
          case 153: break;
          case 74: 
            { return KW_BOOLEAN;
            } 
            // fall through
          case 154: break;
          case 75: 
            { return KW_INTEGER;
            } 
            // fall through
          case 155: break;
          case 76: 
            { return KW_LONGINT;
            } 
            // fall through
          case 156: break;
          case 77: 
            { return KW_POINTER;
            } 
            // fall through
          case 157: break;
          case 78: 
            { return KW_LONGREAL;
            } 
            // fall through
          case 158: break;
          case 79: 
            { return KW_FUNCTION;
            } 
            // fall through
          case 159: break;
          case 80: 
            { return KW_PROCEDURE;
            } 
            // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
