/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package kn.uni.dbis.oberon.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static kn.uni.dbis.oberon.lang.psi.OberonTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_OberonLexer.flex</tt>
 */
public class _OberonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\14\1\2\3\3\22\0\1\14\1\0\1\12\1\65\2\0\1\61\1\0\1\22\1\24\1\23\1\20"+
    "\1\26\1\21\1\15\1\0\1\7\11\6\1\25\1\34\1\64\1\62\1\63\2\0\1\35\1\42\1\47\1"+
    "\37\1\17\1\52\1\43\1\10\1\44\2\11\1\46\1\56\1\36\1\45\1\55\1\11\1\40\1\50"+
    "\1\51\1\54\1\60\1\57\1\53\1\41\1\11\1\30\1\13\1\33\3\0\4\5\1\16\25\5\1\27"+
    "\1\31\1\32\1\66\6\0\1\1\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\1\5\0\1\4\57"+
    "\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\1\1\5\1\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\21\3\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\4\2\0\1\4\1\0"+
    "\1\4\1\0\1\31\2\0\3\3\1\0\1\32\4\3"+
    "\1\33\2\3\1\34\2\3\1\35\1\36\1\37\6\3"+
    "\1\40\11\3\1\41\1\42\2\43\3\0\1\31\1\44"+
    "\1\45\3\3\1\0\1\46\1\3\1\47\1\50\17\3"+
    "\1\51\3\3\1\52\2\3\1\53\1\54\1\3\1\55"+
    "\1\3\1\56\1\3\1\57\7\3\1\60\2\3\1\61"+
    "\1\62\1\63\6\3\1\64\1\65\1\3\1\66\3\3"+
    "\1\67\4\3\1\70\1\3\1\71\1\3\1\72\2\3"+
    "\1\73\1\74\1\75\1\76\1\77\4\3\1\100\2\3"+
    "\1\101\1\102\1\103\1\3\1\104\2\3\1\105\1\106"+
    "\1\3\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\67\0\67\0\u01ef\0\67\0\67\0\u0226\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\u025d\0\u0294"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\67"+
    "\0\67\0\u0604\0\u063b\0\67\0\67\0\u0672\0\u06a9\0\u06e0"+
    "\0\u0717\0\u074e\0\67\0\u014a\0\67\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\67\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\245\0\u09ab\0\u09e2\0\245\0\u0a19\0\u0a50\0\245\0\245"+
    "\0\245\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\245"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\67\0\67\0\u0dc0\0\u0df7\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u014a\0\67\0\245\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\245"+
    "\0\u0f78\0\245\0\245\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\245\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\245\0\245\0\u1432\0\245\0\u1469\0\u0898\0\u14a0"+
    "\0\245\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\245\0\u1658\0\u168f\0\245\0\245\0\245\0\u16c6\0\u16fd"+
    "\0\u1734\0\u176b\0\u17a2\0\u17d9\0\245\0\245\0\u1810\0\245"+
    "\0\u1847\0\u187e\0\u18b5\0\245\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\245\0\u19c8\0\245\0\u19ff\0\245\0\u1a36\0\u1a6d\0\245"+
    "\0\245\0\245\0\245\0\245\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\245\0\u1b80\0\u1bb7\0\245\0\245\0\245\0\u1bee\0\245"+
    "\0\u1c25\0\u1c5c\0\245\0\245\0\u1c93\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\2\4\1\7\1\2"+
    "\1\3\1\10\1\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\4\1\33\1\4"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\4"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\70\0\4\3\7\0\1\3\57\0"+
    "\5\4\4\0\2\4\15\0\24\4\14\0\2\5\2\56"+
    "\3\0\1\57\1\60\1\61\15\0\24\56\14\0\2\62"+
    "\1\63\4\0\1\57\2\60\47\0\2\64\1\0\7\64"+
    "\1\65\1\66\53\64\15\0\1\67\56\0\5\4\4\0"+
    "\2\4\15\0\1\4\1\70\7\4\1\71\4\4\1\72"+
    "\5\4\31\0\1\73\125\0\1\74\11\0\5\4\4\0"+
    "\2\4\15\0\1\4\1\75\1\4\1\76\20\4\13\0"+
    "\5\4\4\0\1\4\1\77\15\0\24\4\13\0\5\4"+
    "\4\0\2\4\15\0\7\4\1\100\1\101\13\4\13\0"+
    "\5\4\4\0\1\4\1\102\15\0\24\4\13\0\5\4"+
    "\4\0\1\4\1\103\15\0\4\4\1\104\3\4\1\105"+
    "\13\4\13\0\5\4\4\0\2\4\15\0\1\4\1\106"+
    "\13\4\1\107\6\4\13\0\5\4\4\0\2\4\15\0"+
    "\3\4\1\110\11\4\1\111\6\4\13\0\5\4\4\0"+
    "\2\4\15\0\10\4\1\112\13\4\13\0\5\4\4\0"+
    "\2\4\15\0\10\4\1\113\13\4\13\0\5\4\4\0"+
    "\2\4\15\0\14\4\1\114\7\4\13\0\3\4\1\115"+
    "\1\4\4\0\2\4\15\0\3\4\1\116\1\117\3\4"+
    "\1\120\13\4\13\0\5\4\4\0\2\4\15\0\1\121"+
    "\7\4\1\122\6\4\1\123\4\4\13\0\5\4\4\0"+
    "\2\4\15\0\1\4\1\124\22\4\13\0\5\4\4\0"+
    "\2\4\15\0\3\4\1\125\20\4\13\0\5\4\4\0"+
    "\2\4\15\0\10\4\1\126\13\4\13\0\3\4\1\127"+
    "\1\4\4\0\2\4\15\0\7\4\1\130\14\4\13\0"+
    "\5\4\4\0\2\4\15\0\1\131\23\4\70\0\1\132"+
    "\66\0\1\133\12\0\4\56\5\0\1\56\15\0\24\56"+
    "\14\0\2\134\65\0\2\135\10\0\2\136\53\0\4\56"+
    "\5\0\1\56\2\136\13\0\24\56\14\0\2\62\5\0"+
    "\1\57\2\60\47\0\2\64\1\137\1\140\6\64\1\141"+
    "\1\66\1\140\52\64\15\0\1\142\56\0\5\4\4\0"+
    "\2\4\15\0\2\4\1\143\21\4\13\0\5\4\4\0"+
    "\2\4\15\0\13\4\1\144\10\4\13\0\5\4\4\0"+
    "\2\4\15\0\7\4\1\145\4\4\1\146\7\4\6\0"+
    "\1\73\3\0\17\73\1\147\43\73\5\0\5\4\4\0"+
    "\2\4\15\0\2\4\1\150\21\4\13\0\5\4\4\0"+
    "\2\4\15\0\3\4\1\151\20\4\13\0\5\4\4\0"+
    "\2\4\15\0\22\4\1\152\1\4\13\0\5\4\4\0"+
    "\2\4\15\0\23\4\1\153\13\0\5\4\4\0\2\4"+
    "\15\0\1\154\11\4\1\155\1\4\1\156\3\4\1\157"+
    "\3\4\13\0\5\4\4\0\2\4\15\0\6\4\1\160"+
    "\15\4\13\0\5\4\4\0\2\4\15\0\10\4\1\161"+
    "\13\4\13\0\5\4\4\0\2\4\15\0\14\4\1\162"+
    "\7\4\13\0\5\4\4\0\2\4\15\0\1\4\1\163"+
    "\6\4\1\164\13\4\13\0\5\4\4\0\2\4\15\0"+
    "\1\4\1\165\22\4\13\0\5\4\4\0\2\4\15\0"+
    "\3\4\1\166\20\4\13\0\5\4\4\0\1\4\1\167"+
    "\15\0\24\4\13\0\5\4\4\0\2\4\15\0\17\4"+
    "\1\170\4\4\13\0\5\4\4\0\2\4\15\0\20\4"+
    "\1\171\3\4\13\0\5\4\4\0\2\4\15\0\11\4"+
    "\1\172\12\4\13\0\5\4\4\0\2\4\15\0\3\4"+
    "\1\173\20\4\13\0\5\4\4\0\2\4\15\0\1\4"+
    "\1\174\22\4\13\0\5\4\4\0\2\4\15\0\14\4"+
    "\1\175\7\4\13\0\5\4\4\0\2\4\15\0\10\4"+
    "\1\176\13\4\13\0\5\4\4\0\2\4\15\0\2\4"+
    "\1\177\21\4\13\0\5\4\4\0\2\4\15\0\7\4"+
    "\1\200\14\4\13\0\5\4\4\0\2\4\15\0\14\4"+
    "\1\201\7\4\13\0\5\4\4\0\2\4\15\0\3\4"+
    "\1\202\20\4\14\0\2\134\6\0\2\60\55\0\2\135"+
    "\61\0\2\137\7\0\1\64\1\137\52\0\2\64\1\137"+
    "\1\140\6\64\1\65\1\66\1\140\52\64\5\0\5\4"+
    "\4\0\1\4\1\203\15\0\7\4\1\204\14\4\13\0"+
    "\5\4\4\0\2\4\15\0\14\4\1\205\7\4\13\0"+
    "\5\4\4\0\1\4\1\206\15\0\24\4\6\0\1\73"+
    "\3\0\17\73\1\147\1\207\42\73\5\0\5\4\4\0"+
    "\2\4\15\0\1\210\23\4\13\0\5\4\4\0\2\4"+
    "\15\0\11\4\1\211\12\4\13\0\5\4\4\0\2\4"+
    "\15\0\10\4\1\212\13\4\13\0\5\4\4\0\2\4"+
    "\15\0\17\4\1\213\4\4\13\0\5\4\4\0\1\4"+
    "\1\214\15\0\24\4\13\0\5\4\4\0\2\4\15\0"+
    "\7\4\1\215\14\4\13\0\5\4\4\0\2\4\15\0"+
    "\11\4\1\216\12\4\13\0\5\4\4\0\1\4\1\217"+
    "\15\0\24\4\13\0\5\4\4\0\2\4\15\0\6\4"+
    "\1\220\15\4\13\0\5\4\4\0\2\4\15\0\20\4"+
    "\1\221\3\4\13\0\5\4\4\0\2\4\15\0\13\4"+
    "\1\222\10\4\13\0\5\4\4\0\2\4\15\0\7\4"+
    "\1\223\14\4\13\0\5\4\4\0\2\4\15\0\1\4"+
    "\1\224\22\4\13\0\5\4\4\0\1\4\1\225\15\0"+
    "\24\4\13\0\5\4\4\0\1\4\1\226\15\0\24\4"+
    "\13\0\5\4\4\0\2\4\15\0\13\4\1\227\10\4"+
    "\13\0\5\4\4\0\2\4\15\0\12\4\1\230\11\4"+
    "\13\0\5\4\4\0\2\4\15\0\7\4\1\231\14\4"+
    "\13\0\5\4\4\0\2\4\15\0\12\4\1\232\11\4"+
    "\13\0\5\4\4\0\2\4\15\0\17\4\1\233\4\4"+
    "\13\0\5\4\4\0\2\4\15\0\11\4\1\234\12\4"+
    "\13\0\3\4\1\235\1\4\4\0\2\4\15\0\24\4"+
    "\13\0\5\4\4\0\2\4\15\0\15\4\1\236\6\4"+
    "\13\0\5\4\4\0\2\4\15\0\3\4\1\237\20\4"+
    "\13\0\5\4\4\0\2\4\15\0\4\4\1\240\17\4"+
    "\13\0\5\4\4\0\2\4\15\0\3\4\1\241\20\4"+
    "\13\0\5\4\4\0\2\4\15\0\3\4\1\242\20\4"+
    "\13\0\5\4\4\0\2\4\15\0\1\243\23\4\13\0"+
    "\5\4\4\0\2\4\15\0\1\4\1\244\22\4\13\0"+
    "\5\4\4\0\1\4\1\245\15\0\24\4\13\0\5\4"+
    "\4\0\2\4\15\0\6\4\1\246\15\4\13\0\5\4"+
    "\4\0\2\4\15\0\3\4\1\247\3\4\1\250\14\4"+
    "\13\0\5\4\4\0\2\4\15\0\14\4\1\251\7\4"+
    "\13\0\5\4\4\0\2\4\15\0\1\4\1\252\22\4"+
    "\13\0\5\4\4\0\1\4\1\253\15\0\24\4\13\0"+
    "\5\4\4\0\2\4\15\0\14\4\1\254\7\4\13\0"+
    "\5\4\4\0\2\4\15\0\11\4\1\255\12\4\13\0"+
    "\5\4\4\0\1\4\1\256\15\0\24\4\13\0\5\4"+
    "\4\0\2\4\15\0\11\4\1\257\12\4\13\0\5\4"+
    "\4\0\1\4\1\260\15\0\24\4\13\0\5\4\4\0"+
    "\2\4\15\0\1\4\1\261\22\4\13\0\5\4\4\0"+
    "\2\4\15\0\2\4\1\262\21\4\13\0\5\4\4\0"+
    "\2\4\15\0\1\4\1\263\22\4\13\0\5\4\4\0"+
    "\2\4\15\0\14\4\1\264\7\4\13\0\5\4\4\0"+
    "\2\4\15\0\1\265\23\4\13\0\5\4\4\0\1\4"+
    "\1\266\15\0\24\4\13\0\5\4\4\0\1\4\1\267"+
    "\15\0\24\4\13\0\5\4\4\0\2\4\15\0\1\4"+
    "\1\270\22\4\13\0\5\4\4\0\2\4\15\0\6\4"+
    "\1\271\15\4\13\0\5\4\4\0\2\4\15\0\7\4"+
    "\1\272\14\4\13\0\5\4\4\0\2\4\15\0\2\4"+
    "\1\273\21\4\13\0\5\4\4\0\1\4\1\274\15\0"+
    "\24\4\13\0\5\4\4\0\2\4\15\0\1\4\1\275"+
    "\22\4\13\0\5\4\4\0\2\4\15\0\3\4\1\276"+
    "\20\4\13\0\5\4\4\0\2\4\15\0\1\277\23\4"+
    "\13\0\5\4\4\0\2\4\15\0\14\4\1\300\7\4"+
    "\13\0\5\4\4\0\2\4\15\0\10\4\1\301\13\4"+
    "\13\0\5\4\4\0\2\4\15\0\17\4\1\302\4\4"+
    "\13\0\5\4\4\0\2\4\15\0\11\4\1\303\12\4"+
    "\13\0\5\4\4\0\2\4\15\0\1\4\1\304\22\4"+
    "\13\0\5\4\4\0\2\4\15\0\3\4\1\305\20\4"+
    "\13\0\5\4\4\0\1\4\1\306\15\0\24\4\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\1\1\2\11\1\1\7\11"+
    "\21\1\2\11\2\1\2\11\1\1\2\0\1\1\1\0"+
    "\1\11\1\0\1\11\2\0\3\1\1\0\1\11\35\1"+
    "\2\11\2\1\3\0\1\1\1\11\4\1\1\0\137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _OberonLexer() {
    this((java.io.Reader)null);
  }
    public void goTo(int offset) {
      zzCurrentPos = zzMarkedPos = zzStartRead = offset;
      zzAtEOF = false;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _OberonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 72: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 73: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 74: break;
          case 4: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 75: break;
          case 5: 
            { return PERIOD;
            } 
            // fall through
          case 76: break;
          case 6: 
            { return OP_PLUS;
            } 
            // fall through
          case 77: break;
          case 7: 
            { return OP_MINUS;
            } 
            // fall through
          case 78: break;
          case 8: 
            { return LPAREN;
            } 
            // fall through
          case 79: break;
          case 9: 
            { return OP_TIMES;
            } 
            // fall through
          case 80: break;
          case 10: 
            { return RPAREN;
            } 
            // fall through
          case 81: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 82: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 83: break;
          case 13: 
            { return LBRACE;
            } 
            // fall through
          case 84: break;
          case 14: 
            { return LBRACK;
            } 
            // fall through
          case 85: break;
          case 15: 
            { return PIPE;
            } 
            // fall through
          case 86: break;
          case 16: 
            { return RBRACE;
            } 
            // fall through
          case 87: break;
          case 17: 
            { return RBRACK;
            } 
            // fall through
          case 88: break;
          case 18: 
            { return SEMICOLON;
            } 
            // fall through
          case 89: break;
          case 19: 
            { return OP_AND;
            } 
            // fall through
          case 90: break;
          case 20: 
            { return OP_EQ;
            } 
            // fall through
          case 91: break;
          case 21: 
            { return OP_GT;
            } 
            // fall through
          case 92: break;
          case 22: 
            { return OP_LT;
            } 
            // fall through
          case 93: break;
          case 23: 
            { return OP_NEQ;
            } 
            // fall through
          case 94: break;
          case 24: 
            { return OP_NOT;
            } 
            // fall through
          case 95: break;
          case 25: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 96: break;
          case 26: 
            { return OP_BECOMES;
            } 
            // fall through
          case 97: break;
          case 27: 
            { return KW_DO;
            } 
            // fall through
          case 98: break;
          case 28: 
            { return KW_BY;
            } 
            // fall through
          case 99: break;
          case 29: 
            { return KW_IF;
            } 
            // fall through
          case 100: break;
          case 30: 
            { return OP_OR;
            } 
            // fall through
          case 101: break;
          case 31: 
            { return KW_OF;
            } 
            // fall through
          case 102: break;
          case 32: 
            { return KW_TO;
            } 
            // fall through
          case 103: break;
          case 33: 
            { return OP_GEQ;
            } 
            // fall through
          case 104: break;
          case 34: 
            { return OP_LEQ;
            } 
            // fall through
          case 105: break;
          case 35: 
            { return REAL_LITERAL;
            } 
            // fall through
          case 106: break;
          case 36: 
            { return VARARGS;
            } 
            // fall through
          case 107: break;
          case 37: 
            { return KW_END;
            } 
            // fall through
          case 108: break;
          case 38: 
            { return KW_AND;
            } 
            // fall through
          case 109: break;
          case 39: 
            { return KW_NEW;
            } 
            // fall through
          case 110: break;
          case 40: 
            { return OP_DIV;
            } 
            // fall through
          case 111: break;
          case 41: 
            { return KW_FOR;
            } 
            // fall through
          case 112: break;
          case 42: 
            { return OP_MOD;
            } 
            // fall through
          case 113: break;
          case 43: 
            { return KW_VAR;
            } 
            // fall through
          case 114: break;
          case 44: 
            { return KW_ELSE;
            } 
            // fall through
          case 115: break;
          case 45: 
            { return KW_EXIT;
            } 
            // fall through
          case 116: break;
          case 46: 
            { return COMMENT;
            } 
            // fall through
          case 117: break;
          case 47: 
            { return KW_REAL;
            } 
            // fall through
          case 118: break;
          case 48: 
            { return KW_LOOP;
            } 
            // fall through
          case 119: break;
          case 49: 
            { return KW_THEN;
            } 
            // fall through
          case 120: break;
          case 50: 
            { return KW_TRUE;
            } 
            // fall through
          case 121: break;
          case 51: 
            { return KW_TYPE;
            } 
            // fall through
          case 122: break;
          case 52: 
            { return KW_WITH;
            } 
            // fall through
          case 123: break;
          case 53: 
            { return KW_ELSIF;
            } 
            // fall through
          case 124: break;
          case 54: 
            { return KW_ARRAY;
            } 
            // fall through
          case 125: break;
          case 55: 
            { return KW_BEGIN;
            } 
            // fall through
          case 126: break;
          case 56: 
            { return KW_CONST;
            } 
            // fall through
          case 127: break;
          case 57: 
            { return KW_FALSE;
            } 
            // fall through
          case 128: break;
          case 58: 
            { return KW_UNTIL;
            } 
            // fall through
          case 129: break;
          case 59: 
            { return KW_WHILE;
            } 
            // fall through
          case 130: break;
          case 60: 
            { return KW_EXTERN;
            } 
            // fall through
          case 131: break;
          case 61: 
            { return KW_RECORD;
            } 
            // fall through
          case 132: break;
          case 62: 
            { return KW_RETURN;
            } 
            // fall through
          case 133: break;
          case 63: 
            { return KW_REPEAT;
            } 
            // fall through
          case 134: break;
          case 64: 
            { return KW_STRING;
            } 
            // fall through
          case 135: break;
          case 65: 
            { return KW_MODULE;
            } 
            // fall through
          case 136: break;
          case 66: 
            { return KW_BOOLEAN;
            } 
            // fall through
          case 137: break;
          case 67: 
            { return KW_INTEGER;
            } 
            // fall through
          case 138: break;
          case 68: 
            { return KW_LONGINT;
            } 
            // fall through
          case 139: break;
          case 69: 
            { return KW_LONGREAL;
            } 
            // fall through
          case 140: break;
          case 70: 
            { return KW_FUNCTION;
            } 
            // fall through
          case 141: break;
          case 71: 
            { return KW_PROCEDURE;
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
